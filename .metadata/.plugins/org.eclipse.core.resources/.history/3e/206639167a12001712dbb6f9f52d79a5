import java.io.File;
import java.io.FileNotFoundException;
import java.util.LinkedList;
import java.util.Queue;
import java.util.Scanner;

public class Lexer {
	private StringBuilder readChars;
	private Scanner file;
	private LinkedList<Token> tokens;
	private String line;
	private int lineIndex = 0;
	private int lineNumber = 0;

	public Lexer(String filename) throws FileNotFoundException {
		file = new Scanner(new File(filename));
		tokens = new LinkedList<Token>();
		getTokens();
	}

	private void getTokens() {

	}

	private Token readToken() {
		Token temp = new Token(Token.Type.EOF);
		readChars = new StringBuilder();
		State state = State.START;
		char c;
		while ((c = getSymbol()) != 26) {
			switch (state) {
			case START:
				switch (getType(c)) {
					case WHITESPACE:
						break;
					case OPERATOR:
						switch(c) {
							case '+':
								temp.type = Token.Type.PLUS;
								return temp;
							case '-':
								temp.type = Token.Type.MINUS;
								return temp;
							case '*':
								temp.type = Token.Type.MULTIPLY;
								return temp;
							case '/':
								temp.type = Token.Type.DIVIDE;
								return temp;
							case ')':
								temp.type = Token.Type.RPAREN;
								return temp;
							case '(':
								temp.type = Token.Type.LPAREN;
							case '=':
								temp.type = Token.Type.EQUALS;
								return temp;
							case '"':
								state = State.STRING;
								break;
							default:
						}
						break;
					case LETTER:
						state = State.VARIABLE;
						readChars.append(c);
						break;
					case DIGIT:
						state = State.INTEGER;
						readChars.append(c);
						break;
					default:
						break;
				}
				break;
			case VARIABLE:
				switch (getType(c)) {
					case OPERATOR:
						lineIndex--;
					case WHITESPACE:
						temp.type = Token.Type.VARIABLE;
						temp.string = readChars.toString();
						return temp;
					case DIGIT:
					case LETTER:
						readChars.append(c);
						break;
					default:
						throw new IllegalStateException("In State " + state + ", invalid character at line " + lineNumber + ": " + c);	
				}
				break;
			case INTEGER:
				switch (getType(c)) {
					case LETTER:
					case OPERATOR:
						if (c == '.') {
							readChars.append(c);
							state = State.DECIMAL;
							break;
						}
						lineIndex--;
					case WHITESPACE:
						temp.type = Token.Type.NUMBER;
						temp.value = Integer.parseInt(readChars.toString());
						return temp;
					case DIGIT:
						readChars.append(c);
						break;
					default:
						throw new IllegalStateException("In State " + state + ", invalid character at line " + lineNumber + ": " + c);
				}
				break;
			case DECIMAL:
				switch (getType(c)) {
					case LETTER:
					case OPERATOR:
						lineIndex--;
					case WHITESPACE:
						temp.type = Token.Type.NUMBER;
						temp.value = Double.parseDouble(readChars.toString());
						return temp;
					case DIGIT:
						readChars.append(c);
						break;
					default:
							throw new IllegalStateException("In State " + state + ", invalid character at line " + lineNumber + ": " + c);
				}
				break;
			case STRING:
				switch (getType(c)) {
				case OPERATOR:
					if (c == '"') {
						temp.type = Token.Type.STRING;
						temp.string = readChars.toString();
						return temp;
					}
				default:
					readChars.append(c);
					break;
				}
				break;
			default:
				throw new IllegalStateException("Invalid State " + state);
			}
		}
		return temp;
	}

	private Symbol getType(char c) {
		if (Character.isAlphabetic(c))
			return Symbol.LETTER;
		if (Character.isDigit(c))
			return Symbol.DIGIT;
		if (Character.isWhitespace(c))
			return Symbol.WHITESPACE;
		switch (c) {
			case '-':
			case '+':
			case '(':
			case ')':
			case '/':
			case '*':
			case '"':
				return Symbol.OPERATOR;
			default:
				return Symbol.ERROR;
		}
	}

	private char getSymbol() {
		if (file.hasNextLine() && (line == null || lineIndex >= line.length())) {
			lineNumber++;
			line = file.nextLine() + '\n';
			lineIndex = 0;
		} else {
			return 26;
		}
		return line.charAt(lineIndex++);
	}
	private Token getToken() {
		Token temp = tokens.remove();
		if (temp == null) return new Token(Token.Type.EOF);
		return temp;
	}
	private Token peekToken() {
		Token temp = tokens.peekFirst();
		if (temp == null) return new Token(Token.Type.EOF);
		return temp;
	}
	private void putBackToken(Token token) {
		tokens.offerFirst(token);
	}
}
